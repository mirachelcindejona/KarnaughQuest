{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus_\\\\OneDrive\\\\Dokumen\\\\2-SEMESTER2\\\\MTK DISKRIT\\\\K-Map_GameWeb\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { getQuestionsByLevel } from \"../data/questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  // State untuk menyimpan data pemain\n  const [playerName, setPlayerName] = useState(\"\");\n\n  // State untuk level dan soal\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [currentQuestion, setCurrentQuestion] = useState(1);\n  const [questions, setQuestions] = useState([]);\n  const [activeQuestion, setActiveQuestion] = useState(null);\n\n  // State untuk lives\n  const [lives, setLives] = useState(3);\n\n  // State untuk jawaban\n  const [karnaughMap, setKarnaughMap] = useState([]);\n\n  // State untuk progress pemain\n  const [completedLevels, setCompletedLevels] = useState([]);\n  const [gameStatus, setGameStatus] = useState(\"playing\"); // 'playing', 'won', 'lost'\n\n  // Load questions berdasarkan level\n  useEffect(() => {\n    const levelQuestions = getQuestionsByLevel(currentLevel);\n    setQuestions(levelQuestions);\n\n    // Set active question\n    if (levelQuestions.length > 0 && currentQuestion <= levelQuestions.length) {\n      setActiveQuestion(levelQuestions[currentQuestion - 1]);\n\n      // Initialize karnaugh map based on question size\n      const question = levelQuestions[currentQuestion - 1];\n      const mapSize = question.mapSize || {\n        rows: 2,\n        cols: 2\n      };\n      initializeKarnaughMap(mapSize.rows, mapSize.cols);\n    }\n  }, [currentLevel, currentQuestion]);\n\n  // Initialize empty Karnaugh Map\n  const initializeKarnaughMap = (rows, cols) => {\n    const newMap = Array(rows).fill().map(() => Array(cols).fill(\"X\"));\n    setKarnaughMap(newMap);\n  };\n\n  // Update Karnaugh Map value at specific cell\n  const updateKarnaughMapCell = (row, col) => {\n    const newMap = [...karnaughMap];\n    // Rotate between X, 0, 1\n    if (newMap[row][col] === \"X\") {\n      newMap[row][col] = \"0\";\n    } else if (newMap[row][col] === \"0\") {\n      newMap[row][col] = \"1\";\n    } else {\n      newMap[row][col] = \"X\";\n    }\n    setKarnaughMap(newMap);\n  };\n\n  // Verify answer\n  const verifyAnswer = () => {\n    if (!activeQuestion) return false;\n\n    // Check if all cells are filled (no X)\n    const hasUnfilledCells = karnaughMap.some(row => row.some(cell => cell === \"X\"));\n    if (hasUnfilledCells) {\n      return {\n        result: false,\n        message: \"Semua sel harus diisi dengan 0 atau 1.\"\n      };\n    }\n\n    // Compare with correct answer\n    const isCorrect = JSON.stringify(karnaughMap) === JSON.stringify(activeQuestion.correctAnswer);\n    if (isCorrect) {\n      // Update completed levels\n      if (!completedLevels.includes(`${currentLevel}-${currentQuestion}`)) {\n        setCompletedLevels([...completedLevels, `${currentLevel}-${currentQuestion}`]);\n      }\n\n      // Go to next question or level\n      if (currentQuestion < 3) {\n        return {\n          result: true,\n          message: \"Hebat! Jawaban kamu benar.\",\n          action: \"nextQuestion\"\n        };\n      } else if (currentLevel < 3) {\n        return {\n          result: true,\n          message: \"Selamat! Kamu telah menyelesaikan Level \" + currentLevel,\n          action: \"nextLevel\"\n        };\n      } else {\n        // Game completed\n        setGameStatus(\"won\");\n        return {\n          result: true,\n          message: \"Selamat! Kamu telah menyelesaikan semua level!\",\n          action: \"gameCompleted\"\n        };\n      }\n    } else {\n      // Wrong answer\n      const newLives = lives - 1;\n      setLives(newLives);\n      if (newLives <= 0) {\n        setGameStatus(\"lost\");\n        return {\n          result: false,\n          message: \"Game Over! Nyawa telah habis.\",\n          action: \"gameover\"\n        };\n      }\n      return {\n        result: false,\n        message: \"Jawaban salah. Coba lagi!\",\n        action: \"tryAgain\"\n      };\n    }\n  };\n\n  // Move to next question\n  const goToNextQuestion = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setLives(3); // Reset lives\n  };\n\n  // Move to next level\n  const goToNextLevel = () => {\n    setCurrentLevel(currentLevel + 1);\n    setCurrentQuestion(1);\n    setLives(3); // Reset lives\n  };\n\n  // Reset game\n  const resetGame = () => {\n    setCurrentLevel(1);\n    setCurrentQuestion(1);\n    setLives(3);\n    setGameStatus(\"playing\");\n    initializeKarnaughMap(2, 2); // Default size for level 1\n  };\n\n  // Start game with player name\n  const startGame = name => {\n    setPlayerName(name);\n    resetGame();\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      playerName,\n      currentLevel,\n      currentQuestion,\n      questions,\n      activeQuestion,\n      lives,\n      karnaughMap,\n      completedLevels,\n      gameStatus,\n      startGame,\n      verifyAnswer,\n      updateKarnaughMapCell,\n      goToNextQuestion,\n      goToNextLevel,\n      resetGame\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"f/7NiFCVadd2Yv5fsEzj1qUhtgM=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","getQuestionsByLevel","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","playerName","setPlayerName","currentLevel","setCurrentLevel","currentQuestion","setCurrentQuestion","questions","setQuestions","activeQuestion","setActiveQuestion","lives","setLives","karnaughMap","setKarnaughMap","completedLevels","setCompletedLevels","gameStatus","setGameStatus","levelQuestions","length","question","mapSize","rows","cols","initializeKarnaughMap","newMap","Array","fill","map","updateKarnaughMapCell","row","col","verifyAnswer","hasUnfilledCells","some","cell","result","message","isCorrect","JSON","stringify","correctAnswer","includes","action","newLives","goToNextQuestion","goToNextLevel","resetGame","startGame","name","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asus_/OneDrive/Dokumen/2-SEMESTER2/MTK DISKRIT/K-Map_GameWeb/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport { getQuestionsByLevel } from \"../data/questions\";\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  // State untuk menyimpan data pemain\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n\r\n  // State untuk level dan soal\r\n  const [currentLevel, setCurrentLevel] = useState(1);\r\n  const [currentQuestion, setCurrentQuestion] = useState(1);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [activeQuestion, setActiveQuestion] = useState(null);\r\n\r\n  // State untuk lives\r\n  const [lives, setLives] = useState(3);\r\n\r\n  // State untuk jawaban\r\n  const [karnaughMap, setKarnaughMap] = useState([]);\r\n\r\n  // State untuk progress pemain\r\n  const [completedLevels, setCompletedLevels] = useState([]);\r\n  const [gameStatus, setGameStatus] = useState(\"playing\"); // 'playing', 'won', 'lost'\r\n\r\n  // Load questions berdasarkan level\r\n  useEffect(() => {\r\n    const levelQuestions = getQuestionsByLevel(currentLevel);\r\n    setQuestions(levelQuestions);\r\n\r\n    // Set active question\r\n    if (levelQuestions.length > 0 && currentQuestion <= levelQuestions.length) {\r\n      setActiveQuestion(levelQuestions[currentQuestion - 1]);\r\n\r\n      // Initialize karnaugh map based on question size\r\n      const question = levelQuestions[currentQuestion - 1];\r\n      const mapSize = question.mapSize || { rows: 2, cols: 2 };\r\n      initializeKarnaughMap(mapSize.rows, mapSize.cols);\r\n    }\r\n  }, [currentLevel, currentQuestion]);\r\n\r\n  // Initialize empty Karnaugh Map\r\n  const initializeKarnaughMap = (rows, cols) => {\r\n    const newMap = Array(rows)\r\n      .fill()\r\n      .map(() => Array(cols).fill(\"X\"));\r\n    setKarnaughMap(newMap);\r\n  };\r\n\r\n  // Update Karnaugh Map value at specific cell\r\n  const updateKarnaughMapCell = (row, col) => {\r\n    const newMap = [...karnaughMap];\r\n    // Rotate between X, 0, 1\r\n    if (newMap[row][col] === \"X\") {\r\n      newMap[row][col] = \"0\";\r\n    } else if (newMap[row][col] === \"0\") {\r\n      newMap[row][col] = \"1\";\r\n    } else {\r\n      newMap[row][col] = \"X\";\r\n    }\r\n    setKarnaughMap(newMap);\r\n  };\r\n\r\n  // Verify answer\r\n  const verifyAnswer = () => {\r\n    if (!activeQuestion) return false;\r\n\r\n    // Check if all cells are filled (no X)\r\n    const hasUnfilledCells = karnaughMap.some((row) =>\r\n      row.some((cell) => cell === \"X\")\r\n    );\r\n    if (hasUnfilledCells) {\r\n      return {\r\n        result: false,\r\n        message: \"Semua sel harus diisi dengan 0 atau 1.\",\r\n      };\r\n    }\r\n\r\n    // Compare with correct answer\r\n    const isCorrect =\r\n      JSON.stringify(karnaughMap) ===\r\n      JSON.stringify(activeQuestion.correctAnswer);\r\n\r\n    if (isCorrect) {\r\n      // Update completed levels\r\n      if (!completedLevels.includes(`${currentLevel}-${currentQuestion}`)) {\r\n        setCompletedLevels([\r\n          ...completedLevels,\r\n          `${currentLevel}-${currentQuestion}`,\r\n        ]);\r\n      }\r\n\r\n      // Go to next question or level\r\n      if (currentQuestion < 3) {\r\n        return {\r\n          result: true,\r\n          message: \"Hebat! Jawaban kamu benar.\",\r\n          action: \"nextQuestion\",\r\n        };\r\n      } else if (currentLevel < 3) {\r\n        return {\r\n          result: true,\r\n          message: \"Selamat! Kamu telah menyelesaikan Level \" + currentLevel,\r\n          action: \"nextLevel\",\r\n        };\r\n      } else {\r\n        // Game completed\r\n        setGameStatus(\"won\");\r\n        return {\r\n          result: true,\r\n          message: \"Selamat! Kamu telah menyelesaikan semua level!\",\r\n          action: \"gameCompleted\",\r\n        };\r\n      }\r\n    } else {\r\n      // Wrong answer\r\n      const newLives = lives - 1;\r\n      setLives(newLives);\r\n\r\n      if (newLives <= 0) {\r\n        setGameStatus(\"lost\");\r\n        return {\r\n          result: false,\r\n          message: \"Game Over! Nyawa telah habis.\",\r\n          action: \"gameover\",\r\n        };\r\n      }\r\n\r\n      return {\r\n        result: false,\r\n        message: \"Jawaban salah. Coba lagi!\",\r\n        action: \"tryAgain\",\r\n      };\r\n    }\r\n  };\r\n\r\n  // Move to next question\r\n  const goToNextQuestion = () => {\r\n    setCurrentQuestion(currentQuestion + 1);\r\n    setLives(3); // Reset lives\r\n  };\r\n\r\n  // Move to next level\r\n  const goToNextLevel = () => {\r\n    setCurrentLevel(currentLevel + 1);\r\n    setCurrentQuestion(1);\r\n    setLives(3); // Reset lives\r\n  };\r\n\r\n  // Reset game\r\n  const resetGame = () => {\r\n    setCurrentLevel(1);\r\n    setCurrentQuestion(1);\r\n    setLives(3);\r\n    setGameStatus(\"playing\");\r\n    initializeKarnaughMap(2, 2); // Default size for level 1\r\n  };\r\n\r\n  // Start game with player name\r\n  const startGame = (name) => {\r\n    setPlayerName(name);\r\n    resetGame();\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        playerName,\r\n        currentLevel,\r\n        currentQuestion,\r\n        questions,\r\n        activeQuestion,\r\n        lives,\r\n        karnaughMap,\r\n        completedLevels,\r\n        gameStatus,\r\n        startGame,\r\n        verifyAnswer,\r\n        updateKarnaughMapCell,\r\n        goToNextQuestion,\r\n        goToNextLevel,\r\n        resetGame,\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}